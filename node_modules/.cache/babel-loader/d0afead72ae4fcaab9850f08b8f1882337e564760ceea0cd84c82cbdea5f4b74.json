{"ast":null,"code":"import React, { useEffect, useRef, useMemo, useState, useImperativeHandle } from 'react';\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return _assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\n/**\r\n * Hook handles manually setting some additional attributes on the video that\r\n * can't be set directly via attributes on the element.\r\n *\r\n * @param {React.RefObject<HTMLVideoElement>} videoRef - Ref to the video element\r\n * @param {bool} muted - Whether the video should be muted\r\n * @param {number} volume - The volume level that the video's audio should be set to\r\n * @param {bool} disableRemotePlayback - Whether we want to disable showing controls to cast the video\r\n * @param {bool} disablePictureInPicture - Whether we want to disable showing controls to play the video in picture-in-picture mode\r\n */\nfunction useSetAdditionalAttributesOnVideo(videoRef, muted, volume, disableRemotePlayback, disablePictureInPicture) {\n  useEffect(function () {\n    var videoElement = videoRef.current;\n    // Manually setting the `muted` attribute on the video element via an effect in order\n    // to avoid a know React issue with the `muted` prop not applying correctly on initial render\n    // https://github.com/facebook/react/issues/10389\n    videoElement.muted = muted;\n    // Set the video's volume to match the `volume` prop\n    // Note that this will have no effect if the `muted` prop is set to true\n    videoElement.volume = volume;\n  }, [videoRef, muted, volume]);\n  useEffect(function () {\n    var videoElement = videoRef.current;\n    // React does not support directly setting disableRemotePlayback or disablePictureInPicture directly\n    // via the video element's props, so we have to manually set them in an effect\n    videoElement.disableRemotePlayback = disableRemotePlayback;\n    videoElement.disablePictureInPicture = disablePictureInPicture;\n  }, [videoRef, disablePictureInPicture, disableRemotePlayback]);\n}\n\n/**\r\n * @function  formatVideoSrc\r\n *\r\n * Hook takes the videoSrc prop and formats it as a standardized array of VideoSource objects which can be used to render\r\n * <source> elements for the video\r\n *\r\n * @param {VideoSrcProp}  videoSrc - Source(s) to format into VideoSource objects so they can be added to the video player.\r\n * @param {number}  playbackRangeStart - The earliest time in seconds that we should start loading the video from.\r\n *                                        This will be enforced by using a #t media fragment identifier to tell the browser to only\r\n *                                        load the video starting from this time.\r\n *                                        If not provided, we will load from the start of the video.\r\n * @param {number}  playbackRangeEnd - The maximum time in seconds that we should load the video to.\r\n *                                        This will be enforced by using a #t media fragment identifier to tell the browser to only\r\n *                                        load the video up to this time.\r\n *                                        If not provided, we will load to the end of the video.\r\n *\r\n * @returns {VideoSource[]} Array of formatted VideoSource objects which can be used to render <source> elements for the video\r\n */\nfunction useFormatVideoSrc(videoSrc, playbackRangeStart, playbackRangeEnd) {\n  var previousVideoSrc = useRef(null);\n  var previousFormattedVideoSources = useRef(null);\n  // If videoSrc is shallowly equal with the previous videoSrc we can just return the previous formatted video sources\n  if (previousVideoSrc.current !== null && videoSrc === previousVideoSrc.current) {\n    return previousFormattedVideoSources.current;\n  }\n  // Store the previous videoSrc so we can compare it on the next render\n  previousVideoSrc.current = videoSrc;\n  var formattedVideoSources = [];\n  if (videoSrc == null) {\n    // A videoSrc value is required in order to make the video player work\n    console.error(\"Error: 'videoSrc' prop is required for HoverVideoPlayer component\");\n  } else {\n    // Make sure we can treat the videoSrc value as an array\n    var rawVideoSources = Array.isArray(videoSrc) ? videoSrc : [videoSrc];\n    // Parse our video source values into an array of VideoSource objects that can be used to render sources for the video\n    for (var i = 0, numSources = rawVideoSources.length; i < numSources; i += 1) {\n      var source = rawVideoSources[i];\n      var hasPlaybackRangeStart = playbackRangeStart !== null;\n      var hasPlaybackRangeEnd = playbackRangeEnd !== null;\n      // Construct a media fragment identifier string to append to the video's URL to ensure\n      // we only load the portion of the video that we need for the provided playback range\n      // (see here for more details: https://developer.mozilla.org/en-US/docs/Web/Guide/Audio_and_video_delivery#specifying_playback_range)\n      var playbackRangeMediaFragmentIdentifier = hasPlaybackRangeStart || hasPlaybackRangeEnd ?\n      // If we have a playback range defined, construct a #t media fragment identifier string\n      // This identifier follows the format `#t=[starttime][,endtime]` and will tell the browser to only load the video file\n      // within this defined time range.\n      // This helps save us from loading some unneeded data when we only need whatever is within the playback range!\n      \"#t=\".concat(hasPlaybackRangeStart ? playbackRangeStart : '').concat(hasPlaybackRangeEnd ? \",\".concat(playbackRangeEnd) : '') : '';\n      if (typeof source === 'string') {\n        // If the source is a string, it's an src URL so format it into a VideoSource object and add it to the array\n        formattedVideoSources.push({\n          src: \"\".concat(source).concat(playbackRangeMediaFragmentIdentifier)\n        });\n      } else if (source && source.src) {\n        // If the source is an object with an src, just add it to the array\n        formattedVideoSources.push({\n          src: \"\".concat(source.src).concat(playbackRangeMediaFragmentIdentifier),\n          type: source.type\n        });\n      } else {\n        // Log an error if one of the videoSrc values is invalid\n        console.error(\"Error: invalid value provided to HoverVideoPlayer prop 'videoSrc':\", source);\n      }\n    }\n  }\n  // If our formatted video sources are deeply equal to the previous formatted sources\n  // based on a simple string comparison, return the previous formatted sources instead to maintain\n  // referential equality\n  if (JSON.stringify(formattedVideoSources) === JSON.stringify(previousFormattedVideoSources.current)) {\n    return previousFormattedVideoSources.current;\n  }\n  // Store the final formatted video sources so we can return them on subsequent renders\n  // if the videoSrc hasn't changed\n  previousFormattedVideoSources.current = formattedVideoSources;\n  return formattedVideoSources;\n}\n\n/**\r\n * Hook takes the videoCaptions prop and formats it as a standardized array of VideoCaptionsTrack objects which can be used to render\r\n * <track> elements for the video\r\n *\r\n * @param {VideoCaptionsProp} videoCaptions - Captions track(s) to use for the video player for accessibility.\r\n *\r\n * @returns {VideoCaptionsTrack[]}  Array of formatted VideoCaptionsTrack objects which can be used to render <track> elements for the video\r\n */\nfunction useFormatVideoCaptions(videoCaptions) {\n  return useMemo(function () {\n    var formattedVideoCaptions = [];\n    // If captions were provided, format them for use for the video\n    if (videoCaptions != null) {\n      // Make sure we can treat the videoCaptions value as an array\n      var rawVideoCaptions = Array.isArray(videoCaptions) ? videoCaptions : [videoCaptions];\n      // Parse our raw video captions values into an array of formatted VideoCaptionsTrack\n      // objects that can be used to render caption tracks for the video\n      for (var i = 0, numCaptions = rawVideoCaptions.length; i < numCaptions; i += 1) {\n        var captions = rawVideoCaptions[i];\n        if (captions && captions.src) {\n          formattedVideoCaptions.push({\n            src: captions.src,\n            srcLang: captions.srcLang,\n            label: captions.label,\n            kind: captions.kind || 'captions',\n            default: Boolean(captions.default)\n          });\n        } else {\n          // Log an error if one of the videoCaptions values is invalid\n          console.error(\"Error: invalid value provided to HoverVideoPlayer prop 'videoCaptions'\", captions);\n        }\n      }\n    }\n    return formattedVideoCaptions;\n  }, [videoCaptions]);\n}\nvar getElementFromHoverTarget = function getElementFromHoverTarget(hoverTarget) {\n  // A `hoverTarget` value could be a function, a DOM element, or a React ref, so\n  // figure out which one it is and get the hover target element out of it accordingly\n  if (typeof hoverTarget === 'function') {\n    return hoverTarget();\n  } else if (hoverTarget instanceof Node) {\n    return hoverTarget;\n  } else if (hoverTarget && hoverTarget.hasOwnProperty('current')) {\n    return hoverTarget.current;\n  } else {\n    console.error('HoverVideoPlayer was unable to get a usable hover target element. Please check your usage of the `hoverTarget` prop.');\n  }\n};\n/**\r\n * Extracts a node to watch for hover events on from the `hoverTarget` prop.\r\n *\r\n * @param {HoverTarget} hoverTarget\r\n */\nfunction useHoverTargetElement(hoverTarget) {\n  var _a = useState(null),\n    hoverTargetElement = _a[0],\n    setHoverTargetElement = _a[1];\n  useEffect(function () {\n    setHoverTargetElement(getElementFromHoverTarget(hoverTarget));\n  }, [hoverTarget]);\n  return hoverTargetElement;\n}\n\n/**\r\n * Sets up listeners for hover events on the hover target element and dispatches events\r\n * when the target element is hovered or unhovered.\r\n *\r\n * @param {Node} hoverTargetElement - The target element to watch for hover events on\r\n * @param {boolean} focused - Whether the component is being manually focused by the focused prop.\r\n * @param {boolean} disableDefaultEventHandling - If true, disables setting up the standard mouseenter/touchstart/focus listeners\r\n *                                                on the hover target element.\r\n * @param {func} onHoverStartCallback - Optional callback to be called when the target element is hovered.\r\n * @param {func} onHoverEndCallback - Optional callback to be called when the hover target element is unhovered.\r\n */\nfunction useManageHoverEvents(hoverTargetElement, focused, disableDefaultEventHandling, onHoverStartCallback, onHoverEndCallback) {\n  // Keeping hover callbacks as refs because we want to be able to access them from within our\n  // onHoverStart and onHoverEnd event listeners without needing to re-run the\n  // event setup effect every time they change\n  var onHoverStartCallbackRef = useRef();\n  onHoverStartCallbackRef.current = onHoverStartCallback;\n  var onHoverEndCallbackRef = useRef();\n  onHoverEndCallbackRef.current = onHoverEndCallback;\n  useEffect(function () {\n    // If default event handling is disabled, we shouldn't check for touch events outside of the player\n    if (disableDefaultEventHandling || !hoverTargetElement) return undefined;\n    var onHoverStart = function onHoverStart() {\n      hoverTargetElement.dispatchEvent(new Event('hvp:hoverStart'));\n      if (onHoverStartCallbackRef.current) onHoverStartCallbackRef.current();\n    };\n    var onHoverEnd = function onHoverEnd() {\n      hoverTargetElement.dispatchEvent(new Event('hvp:hoverEnd'));\n      if (onHoverEndCallbackRef.current) onHoverEndCallbackRef.current();\n    };\n    // Mouse events\n    hoverTargetElement.addEventListener('mouseenter', onHoverStart);\n    hoverTargetElement.addEventListener('mouseleave', onHoverEnd);\n    // Focus/blur\n    hoverTargetElement.addEventListener('focus', onHoverStart);\n    hoverTargetElement.addEventListener('blur', onHoverEnd);\n    // Touch events\n    var touchStartListenerOptions = {\n      passive: true\n    };\n    hoverTargetElement.addEventListener('touchstart', onHoverStart, touchStartListenerOptions);\n    // Event listener pauses the video when the user touches somewhere outside of the player\n    var onWindowTouchStart = function onWindowTouchStart(event) {\n      if (!(event.target instanceof Node) || !hoverTargetElement.contains(event.target)) {\n        onHoverEnd();\n      }\n    };\n    window.addEventListener('touchstart', onWindowTouchStart, touchStartListenerOptions);\n    // Return a cleanup function that removes all event listeners\n    return function () {\n      hoverTargetElement.removeEventListener('mouseenter', onHoverStart);\n      hoverTargetElement.removeEventListener('mouseleave', onHoverEnd);\n      hoverTargetElement.removeEventListener('focus', onHoverStart);\n      hoverTargetElement.removeEventListener('blur', onHoverEnd);\n      hoverTargetElement.removeEventListener('touchstart', onHoverStart);\n      window.removeEventListener('touchstart', onWindowTouchStart);\n    };\n  }, [disableDefaultEventHandling, hoverTargetElement]);\n  // Defaulting the ref to false rather than the initial value of the focused prop because\n  // if focused is true initially, we want to run the effect, but if it's false, we don't\n  var previousFocusedRef = useRef(false);\n  // Effect dispatches hover start/end events on the target element when the focused prop changes\n  useEffect(function () {\n    if (!hoverTargetElement) return;\n    if (previousFocusedRef.current !== focused) {\n      previousFocusedRef.current = focused;\n      if (focused) {\n        hoverTargetElement.dispatchEvent(new Event('hvp:hoverStart'));\n      } else {\n        hoverTargetElement.dispatchEvent(new Event('hvp:hoverEnd'));\n      }\n    }\n  }, [hoverTargetElement, focused]);\n}\n\n/**\r\n * Takes a video element and returns whether it is currently paused, meaning it is not\r\n * playing or attempting to play.\r\n *\r\n * @param {HTMLVideoElement} videoElement\r\n */\nfunction isVideoElementPaused(videoElement) {\n  return videoElement.paused || videoElement.ended;\n}\n/**\r\n * Takes a video element and returns whether it is currently loading, meaning it is not\r\n * paused but has also not loaded enough to play.\r\n *\r\n * @param {HTMLVideoElement} videoElement\r\n */\nfunction isVideoElementLoading(videoElement) {\n  return !isVideoElementPaused(videoElement) && videoElement.readyState < videoElement.HAVE_FUTURE_DATA;\n}\n/**\r\n * Takes a video element and returns whether it is currently playing, meaning it is not\r\n * paused and is loaded enough to be playing.\r\n *\r\n * @param {HTMLVideoElement} videoElement\r\n */\nfunction isVideoElementPlaying(videoElement) {\n  return !isVideoElementPaused(videoElement) && !isVideoElementLoading(videoElement);\n}\n\n// CSS styles to make some contents in the player expand to fill the container\nvar expandToFillContainerStyle = {\n  position: 'absolute',\n  width: '100%',\n  height: '100%',\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0\n};\nvar containerMatchContentDimensionsStyle = {\n  display: 'inline-block'\n};\nvar containerSizingStyles = {\n  video: containerMatchContentDimensionsStyle,\n  overlay: containerMatchContentDimensionsStyle,\n  container: null,\n  manual: null\n};\n// Styles to apply to the paused overlay wrapper for each sizing mode\nvar pausedOverlayWrapperSizingStyles = {\n  // Sizing should be based on the video element, so make the overlay\n  // expand to cover the player's container element\n  video: expandToFillContainerStyle,\n  // Sizing should be based on the paused overlay, so set position: relative\n  // to make it occupy space in the document flow\n  overlay: {\n    position: 'relative'\n  },\n  // Sizing should be based on the player's container element, so make the overlay\n  // expand to cover it\n  container: expandToFillContainerStyle,\n  // Don't apply any preset styling to the overlay\n  manual: null\n};\n// Styles to apply to the video element for each sizing mode\nvar videoSizingStyles = {\n  // Sizing should be based on the video element, so set display: block\n  // to make sure it occupies space in the document flow\n  video: {\n    display: 'block',\n    // Ensure the video is sized relative to the container's width\n    // rather than the video asset's native width\n    width: '100%'\n  },\n  // Make the video element expand to cover the container if we're sizing\n  // based on the overlay or container\n  overlay: expandToFillContainerStyle,\n  container: expandToFillContainerStyle,\n  // Don't apply any preset styling to the video\n  manual: null\n};\n\n/**\r\n * @component HoverVideoPlayer\r\n * @license MIT\r\n *\r\n * @param {HoverVideoPlayerProps} props\r\n */\nfunction HoverVideoPlayer(_a) {\n  var videoSrc = _a.videoSrc,\n    _b = _a.videoCaptions,\n    videoCaptions = _b === void 0 ? null : _b,\n    _c = _a.focused,\n    focused = _c === void 0 ? false : _c,\n    _d = _a.disableDefaultEventHandling,\n    disableDefaultEventHandling = _d === void 0 ? false : _d,\n    _e = _a.hoverTarget,\n    hoverTarget = _e === void 0 ? null : _e,\n    _f = _a.onHoverStart,\n    onHoverStart = _f === void 0 ? null : _f,\n    _g = _a.onHoverEnd,\n    onHoverEnd = _g === void 0 ? null : _g,\n    _h = _a.hoverOverlay,\n    hoverOverlay = _h === void 0 ? null : _h,\n    _j = _a.pausedOverlay,\n    pausedOverlay = _j === void 0 ? null : _j,\n    _k = _a.loadingOverlay,\n    loadingOverlay = _k === void 0 ? null : _k,\n    _l = _a.loadingStateTimeout,\n    loadingStateTimeout = _l === void 0 ? 200 : _l,\n    _m = _a.overlayTransitionDuration,\n    overlayTransitionDuration = _m === void 0 ? 400 : _m,\n    _o = _a.playbackStartDelay,\n    playbackStartDelay = _o === void 0 ? 0 : _o,\n    _p = _a.restartOnPaused,\n    restartOnPaused = _p === void 0 ? false : _p,\n    _q = _a.unloadVideoOnPaused,\n    unloadVideoOnPaused = _q === void 0 ? false : _q,\n    _r = _a.playbackRangeStart,\n    playbackRangeStart = _r === void 0 ? null : _r,\n    _s = _a.playbackRangeEnd,\n    playbackRangeEnd = _s === void 0 ? null : _s,\n    _t = _a.muted,\n    muted = _t === void 0 ? true : _t,\n    _u = _a.volume,\n    volume = _u === void 0 ? 1 : _u,\n    _v = _a.loop,\n    loop = _v === void 0 ? true : _v,\n    _w = _a.preload,\n    preload = _w === void 0 ? null : _w,\n    _x = _a.crossOrigin,\n    crossOrigin = _x === void 0 ? null : _x,\n    _y = _a.controls,\n    controls = _y === void 0 ? false : _y,\n    _z = _a.controlsList,\n    controlsList = _z === void 0 ? null : _z,\n    _0 = _a.disableRemotePlayback,\n    disableRemotePlayback = _0 === void 0 ? true : _0,\n    _1 = _a.disablePictureInPicture,\n    disablePictureInPicture = _1 === void 0 ? true : _1,\n    _2 = _a.style,\n    style = _2 === void 0 ? null : _2,\n    _3 = _a.hoverOverlayWrapperClassName,\n    hoverOverlayWrapperClassName = _3 === void 0 ? null : _3,\n    _4 = _a.hoverOverlayWrapperStyle,\n    hoverOverlayWrapperStyle = _4 === void 0 ? null : _4,\n    _5 = _a.pausedOverlayWrapperClassName,\n    pausedOverlayWrapperClassName = _5 === void 0 ? null : _5,\n    _6 = _a.pausedOverlayWrapperStyle,\n    pausedOverlayWrapperStyle = _6 === void 0 ? null : _6,\n    _7 = _a.loadingOverlayWrapperClassName,\n    loadingOverlayWrapperClassName = _7 === void 0 ? null : _7,\n    _8 = _a.loadingOverlayWrapperStyle,\n    loadingOverlayWrapperStyle = _8 === void 0 ? null : _8,\n    _9 = _a.videoId,\n    videoId = _9 === void 0 ? null : _9,\n    _10 = _a.videoClassName,\n    videoClassName = _10 === void 0 ? null : _10,\n    _11 = _a.videoRef,\n    forwardedVideoRef = _11 === void 0 ? null : _11,\n    _12 = _a.videoStyle,\n    videoStyle = _12 === void 0 ? null : _12,\n    _13 = _a.sizingMode,\n    sizingMode = _13 === void 0 ? 'video' : _13,\n    _14 = _a.shouldSuppressPlaybackInterruptedErrors,\n    shouldSuppressPlaybackInterruptedErrors = _14 === void 0 ? true : _14,\n    spreadableProps = __rest(_a, [\"videoSrc\", \"videoCaptions\", \"focused\", \"disableDefaultEventHandling\", \"hoverTarget\", \"onHoverStart\", \"onHoverEnd\", \"hoverOverlay\", \"pausedOverlay\", \"loadingOverlay\", \"loadingStateTimeout\", \"overlayTransitionDuration\", \"playbackStartDelay\", \"restartOnPaused\", \"unloadVideoOnPaused\", \"playbackRangeStart\", \"playbackRangeEnd\", \"muted\", \"volume\", \"loop\", \"preload\", \"crossOrigin\", \"controls\", \"controlsList\", \"disableRemotePlayback\", \"disablePictureInPicture\", \"style\", \"hoverOverlayWrapperClassName\", \"hoverOverlayWrapperStyle\", \"pausedOverlayWrapperClassName\", \"pausedOverlayWrapperStyle\", \"loadingOverlayWrapperClassName\", \"loadingOverlayWrapperStyle\", \"videoId\", \"videoClassName\", \"videoRef\", \"videoStyle\", \"sizingMode\", \"shouldSuppressPlaybackInterruptedErrors\"]);\n  // Element refs\n  var containerRef = useRef(null);\n  var videoRef = useRef(null);\n  // Forward out local videoRef along to the videoRef prop\n  useImperativeHandle(forwardedVideoRef, function () {\n    return videoRef.current;\n  });\n  // Effect sets attributes on the video which can't be done via props\n  useSetAdditionalAttributesOnVideo(videoRef, muted, volume, disableRemotePlayback, disablePictureInPicture);\n  // Get the hover target element from the hoverTarget prop, or default to the component's container div\n  var hoverTargetElement = useHoverTargetElement(hoverTarget || containerRef);\n  // Keep a ref for the time which the video should be started from next time it is played\n  // This is useful if the video gets unloaded and we want to restore it to the time it was\n  // at before if the user tries playing it again\n  var nextVideoStartTimeRef = useRef(null);\n  // Parse the sources and captions into formatted arrays that we can use to\n  // render <source> and <track> elements for the video\n  var formattedVideoCaptions = useFormatVideoCaptions(videoCaptions);\n  var formattedVideoSources = useFormatVideoSrc(videoSrc, playbackRangeStart, playbackRangeEnd);\n  // Keep a ref to the previous formatted video sources so we can track when the video sources change\n  var previousFormattedVideoSourcesRef = useRef(formattedVideoSources);\n  /**\r\n   * Attempts to load and play the video.\r\n   * Storing this on a ref because we don't really want to worry about triggering re-renders when\r\n   * any of this function's dependencies change; it should only be called when the\r\n   * player is hovered/focused.\r\n   */\n  var attemptToPlayVideoRef = useRef();\n  attemptToPlayVideoRef.current = function () {\n    var videoElement = videoRef.current;\n    if (nextVideoStartTimeRef.current !== null) {\n      videoElement.currentTime = nextVideoStartTimeRef.current;\n    }\n    videoElement.play().catch(function (error) {\n      // If shouldSuppressPlaybackInterruptedErrors is true and this is an AbortError, do nothing instead of logging it.\n      if (shouldSuppressPlaybackInterruptedErrors && error.name === 'AbortError') {\n        return;\n      }\n      // Additional handling for when browsers block playback for unmuted videos.\n      // This is unfortunately necessary because most modern browsers do not allow playing videos with audio\n      //  until the user has \"interacted\" with the page by clicking somewhere at least once; mouseenter events\n      //  don't count.\n      // If the video isn't muted and playback failed with a `NotAllowedError`, this means the browser blocked\n      // playing the video because the user hasn't clicked anywhere on the page yet.\n      if (!videoElement.muted && error.name === 'NotAllowedError') {\n        console.warn('HoverVideoPlayer: Playback with sound was blocked by the browser. Attempting to play again with the video muted; audio will be restored if the user clicks on the page.');\n        // Mute the video and attempt to play again\n        videoElement.muted = true;\n        videoElement.play();\n        // When the user clicks on the document, unmute the video since we should now\n        // be free to play audio\n        var onClickDocument_1 = function onClickDocument_1() {\n          videoElement.muted = false;\n          // Clean up the event listener so it is only fired once\n          document.removeEventListener('click', onClickDocument_1);\n        };\n        document.addEventListener('click', onClickDocument_1);\n      } else {\n        // Log any other playback errors with console.error\n        console.error(\"HoverVideoPlayer: \".concat(error.message));\n      }\n    });\n  };\n  /**\r\n   * Attempts to pause the video.\r\n   * Storing this on a ref because we don't really want to worry about triggering re-renders when\r\n   * any of this function's dependencies change; it should only be called when the\r\n   * player is un-hovered/focused.\r\n   */\n  var attemptToPauseVideoRef = useRef();\n  attemptToPauseVideoRef.current = function () {\n    var videoElement = videoRef.current;\n    videoElement.pause();\n    // Performing post-save cleanup tasks in here rather than the onPause listener\n    // because onPause can also be called when the video reaches the end of a playback range\n    // and it's just simpler to deal with that separately\n    if (restartOnPaused) {\n      videoElement.currentTime = playbackRangeStart || 0;\n    }\n    nextVideoStartTimeRef.current = videoElement.currentTime;\n    setIsPlaying(false);\n  };\n  var _15 = useState(false),\n    isPlaying = _15[0],\n    setIsPlaying = _15[1];\n  var _16 = useState(false),\n    isHovering = _16[0],\n    setIsHovering = _16[1];\n  useEffect(function () {\n    if (!isPlaying) {\n      // When the video isn't playing, check if the sources loaded in the video\n      // have changed from what the video currently has loaded. If so, we'll call videoElement.load()\n      // to trigger a reload with the new source\n      var shouldReloadVideoSources = previousFormattedVideoSourcesRef.current !== formattedVideoSources;\n      if (shouldReloadVideoSources) {\n        previousFormattedVideoSourcesRef.current = formattedVideoSources;\n        var videoElement = videoRef.current;\n        // If the video element doesn't have a loaded source or the source has changed since the\n        // last time we played the video, make sure to force the video to load the most up-to-date sources\n        videoElement.load();\n        // Reset the next start time to the start of the video\n        nextVideoStartTimeRef.current = playbackRangeStart || 0;\n      }\n    }\n  }, [formattedVideoSources, isPlaying, playbackRangeStart]);\n  var hasPausedOverlay = Boolean(pausedOverlay);\n  var hasHoverOverlay = Boolean(hoverOverlay);\n  // If we have a paused or hover overlay, the player should wait\n  // for the overlay(s) to finish transitioning back in before we\n  // pause the video\n  var shouldWaitForOverlayTransitionBeforePausing = hasPausedOverlay || hasHoverOverlay;\n  useEffect(function () {\n    if (!hoverTargetElement) return undefined;\n    var playbackStartTimeout = null;\n    var pauseTimeout = null;\n    var cancelTimeouts = function cancelTimeouts() {\n      // Cancel any previously active pause or playback attempts\n      window.clearTimeout(playbackStartTimeout);\n      window.clearTimeout(pauseTimeout);\n    };\n    var attemptToPlayVideoOnHover = function attemptToPlayVideoOnHover() {\n      cancelTimeouts();\n      setIsHovering(true);\n      // We only need to attempt to play if the video is currently paused\n      if (isVideoElementPaused(videoRef.current)) {\n        if (playbackStartDelay) {\n          playbackStartTimeout = window.setTimeout(function () {\n            return attemptToPlayVideoRef.current();\n          }, playbackStartDelay);\n        } else {\n          attemptToPlayVideoRef.current();\n        }\n      }\n    };\n    var attemptToPauseVideoOnHoverEnd = function attemptToPauseVideoOnHoverEnd() {\n      cancelTimeouts();\n      setIsHovering(false);\n      if (\n      // We only need to delay a pause attempt if the video is currently playing\n      isVideoElementPlaying(videoRef.current) && shouldWaitForOverlayTransitionBeforePausing) {\n        pauseTimeout = window.setTimeout(function () {\n          return attemptToPauseVideoRef.current();\n        }, overlayTransitionDuration);\n      } else {\n        attemptToPauseVideoRef.current();\n      }\n    };\n    hoverTargetElement.addEventListener('hvp:hoverStart', attemptToPlayVideoOnHover);\n    hoverTargetElement.addEventListener('hvp:hoverEnd', attemptToPauseVideoOnHoverEnd);\n    return function () {\n      hoverTargetElement.removeEventListener('hvp:hoverStart', attemptToPlayVideoOnHover);\n      hoverTargetElement.removeEventListener('hvp:hoverEnd', attemptToPauseVideoOnHoverEnd);\n      cancelTimeouts();\n    };\n  }, [hoverTargetElement, overlayTransitionDuration, playbackStartDelay, shouldWaitForOverlayTransitionBeforePausing]);\n  useManageHoverEvents(hoverTargetElement, focused, disableDefaultEventHandling, onHoverStart, onHoverEnd);\n  // We should attempt to play the video if the user is hovering over it or the `focused` override prop is enabled\n  // const shouldPlayVideo = isHoveringOverVideo || focused;\n  var hasLoadingOverlay = Boolean(loadingOverlay);\n  // If the video's sources should be unloaded when it's paused and the video is not currently active, we can unload the video's sources.\n  // We will remove the video's <source> tags in this render and then call video.load() in an effect to\n  // fully unload the video\n  var shouldUnloadVideo = unloadVideoOnPaused && !isHovering && !isPlaying;\n  useEffect(function () {\n    // If shouldUnloadVideo is true, this effect is being run after the video's\n    // sources have been removed, so call load on the video to unload any sources it currently has loaded\n    if (shouldUnloadVideo) {\n      var videoElement = videoRef.current;\n      videoElement.load();\n    }\n  }, [shouldUnloadVideo]);\n  var shouldShowLoadingOverlay = isHovering && !isPlaying;\n  // Show a paused overlay when the user isn't hovering or when the user is hovering\n  // but the video is still loading\n  var shouldShowPausedOverlay = !isHovering || isHovering && !isPlaying;\n  var isUsingPlaybackRange = playbackRangeStart !== null || playbackRangeEnd !== null;\n  return React.createElement(\"div\", _assign({\n    \"data-testid\": \"hover-video-player-container\",\n    ref: containerRef,\n    style: _assign(_assign(_assign({}, containerSizingStyles[sizingMode]), {\n      position: 'relative'\n    }), style)\n  }, spreadableProps), hasPausedOverlay ? React.createElement(\"div\", {\n    style: _assign(_assign(_assign({}, pausedOverlayWrapperSizingStyles[sizingMode]), {\n      zIndex: 1,\n      opacity: shouldShowPausedOverlay ? 1 : 0,\n      transition: \"opacity \".concat(overlayTransitionDuration, \"ms\"),\n      // Disable pointer events on the paused overlay when it's hidden\n      pointerEvents: shouldShowPausedOverlay ? 'auto' : 'none'\n    }), pausedOverlayWrapperStyle),\n    className: pausedOverlayWrapperClassName,\n    \"data-testid\": \"paused-overlay-wrapper\"\n  }, pausedOverlay) : null, hasLoadingOverlay ? React.createElement(\"div\", {\n    style: _assign(_assign(_assign({}, expandToFillContainerStyle), {\n      zIndex: 2,\n      opacity: shouldShowLoadingOverlay ? 1 : 0,\n      transition: \"opacity \".concat(overlayTransitionDuration, \"ms \").concat(shouldShowLoadingOverlay ? loadingStateTimeout : 0, \"ms\"),\n      // Disable pointer events on the loading overlay when it's hidden\n      pointerEvents: shouldShowLoadingOverlay ? 'auto' : 'none'\n    }), loadingOverlayWrapperStyle),\n    className: loadingOverlayWrapperClassName,\n    \"data-testid\": \"loading-overlay-wrapper\"\n  }, loadingOverlay) : null, hasHoverOverlay ? React.createElement(\"div\", {\n    style: _assign(_assign(_assign({}, expandToFillContainerStyle), {\n      zIndex: 3,\n      // Show the hover overlay when the player is hovered/playing\n      opacity: isHovering ? 1 : 0,\n      transition: \"opacity \".concat(overlayTransitionDuration, \"ms\"),\n      // Disable pointer events on the hover overlay when it's hidden\n      pointerEvents: isHovering ? 'auto' : 'none'\n    }), hoverOverlayWrapperStyle),\n    className: hoverOverlayWrapperClassName,\n    \"data-testid\": \"hover-overlay-wrapper\"\n  }, hoverOverlay) : null, React.createElement(\"video\", {\n    // If a playback range is set, the loop attribute will not work correctly so there's no point in setting it here;\n    // in that case, we will manually implement this behavior\n    loop: isUsingPlaybackRange ? false : loop,\n    playsInline: true,\n    preload: preload,\n    crossOrigin: crossOrigin,\n    ref: videoRef,\n    style: _assign(_assign(_assign({}, videoSizingStyles[sizingMode]), {\n      objectFit: 'cover'\n    }), videoStyle),\n    controls: controls,\n    controlsList: controlsList,\n    className: videoClassName,\n    id: videoId,\n    \"data-testid\": \"video-element\",\n    onPlaying: function onPlaying() {\n      setIsPlaying(true);\n    },\n    onTimeUpdate:\n    // If there's a playback range set, the traditional `loop` video prop won't work correctly so\n    // we'll need watch the video's time as it plays and manually keep it within the bounds of the range\n    isUsingPlaybackRange ? function () {\n      var videoElement = videoRef.current;\n      var maxVideoTime = playbackRangeEnd || videoElement.duration;\n      var minVideoTime = playbackRangeStart || 0;\n      var currentTime = videoElement.currentTime;\n      if (loop && currentTime >= maxVideoTime) {\n        // If the video should loop and is >= the max video time,\n        // loop it back around to the start\n        var startTime = playbackRangeStart || 0;\n        videoElement.currentTime = startTime;\n        // If the video is paused but the user is still hovering,\n        // meaning it should continue to play, call play() to keep it going\n        if (isHovering && isVideoElementPaused(videoElement)) {\n          videoElement.play();\n        }\n      } else if (currentTime > maxVideoTime) {\n        // If the video shouldn't loop but we've exceeded the max video time,\n        // clamp it to the max time and pause it\n        videoElement.pause();\n        videoElement.currentTime = maxVideoTime;\n      } else if (currentTime < minVideoTime) {\n        // If the video's time somehow ended up before the min video time,\n        // clamp it to the min time\n        videoElement.currentTime = minVideoTime;\n      }\n    } : null\n  }, !shouldUnloadVideo &&\n  // Only render sources for the video if it is not unloaded\n  formattedVideoSources.map(function (_a) {\n    var src = _a.src,\n      type = _a.type;\n    return React.createElement(\"source\", {\n      key: src,\n      src: src,\n      type: type\n    });\n  }), formattedVideoCaptions.map(function (_a) {\n    var src = _a.src,\n      srcLang = _a.srcLang,\n      label = _a.label,\n      kind = _a.kind,\n      isDefault = _a.default;\n    return React.createElement(\"track\", {\n      key: src,\n      kind: kind,\n      src: src,\n      srcLang: srcLang,\n      label: label,\n      default: isDefault\n    });\n  })));\n}\nexport { HoverVideoPlayer as default };","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","useSetAdditionalAttributesOnVideo","videoRef","muted","volume","disableRemotePlayback","disablePictureInPicture","useEffect","videoElement","current","useFormatVideoSrc","videoSrc","playbackRangeStart","playbackRangeEnd","previousVideoSrc","useRef","previousFormattedVideoSources","formattedVideoSources","console","error","rawVideoSources","Array","isArray","numSources","source","hasPlaybackRangeStart","hasPlaybackRangeEnd","playbackRangeMediaFragmentIdentifier","concat","push","src","type","JSON","stringify","useFormatVideoCaptions","videoCaptions","useMemo","formattedVideoCaptions","rawVideoCaptions","numCaptions","captions","srcLang","label","kind","default","Boolean","getElementFromHoverTarget","hoverTarget","Node","useHoverTargetElement","_a","useState","hoverTargetElement","setHoverTargetElement","useManageHoverEvents","focused","disableDefaultEventHandling","onHoverStartCallback","onHoverEndCallback","onHoverStartCallbackRef","onHoverEndCallbackRef","undefined","onHoverStart","dispatchEvent","Event","onHoverEnd","addEventListener","touchStartListenerOptions","passive","onWindowTouchStart","event","target","contains","window","removeEventListener","previousFocusedRef","isVideoElementPaused","paused","ended","isVideoElementLoading","readyState","HAVE_FUTURE_DATA","isVideoElementPlaying","expandToFillContainerStyle","position","width","height","top","bottom","left","right","containerMatchContentDimensionsStyle","display","containerSizingStyles","video","overlay","container","manual","pausedOverlayWrapperSizingStyles","videoSizingStyles","HoverVideoPlayer","_b","_c","_d","_e","_f","_g","_h","hoverOverlay","_j","pausedOverlay","_k","loadingOverlay","_l","loadingStateTimeout","_m","overlayTransitionDuration","_o","playbackStartDelay","_p","restartOnPaused","_q","unloadVideoOnPaused","_r","_s","_t","_u","_v","loop","_w","preload","_x","crossOrigin","_y","controls","_z","controlsList","_0","_1","_2","style","_3","hoverOverlayWrapperClassName","_4","hoverOverlayWrapperStyle","_5","pausedOverlayWrapperClassName","_6","pausedOverlayWrapperStyle","_7","loadingOverlayWrapperClassName","_8","loadingOverlayWrapperStyle","_9","videoId","_10","videoClassName","_11","forwardedVideoRef","_12","videoStyle","_13","sizingMode","_14","shouldSuppressPlaybackInterruptedErrors","spreadableProps","containerRef","useImperativeHandle","nextVideoStartTimeRef","previousFormattedVideoSourcesRef","attemptToPlayVideoRef","currentTime","play","catch","name","warn","onClickDocument_1","document","message","attemptToPauseVideoRef","pause","setIsPlaying","_15","isPlaying","_16","isHovering","setIsHovering","shouldReloadVideoSources","load","hasPausedOverlay","hasHoverOverlay","shouldWaitForOverlayTransitionBeforePausing","playbackStartTimeout","pauseTimeout","cancelTimeouts","clearTimeout","attemptToPlayVideoOnHover","setTimeout","attemptToPauseVideoOnHoverEnd","hasLoadingOverlay","shouldUnloadVideo","shouldShowLoadingOverlay","shouldShowPausedOverlay","isUsingPlaybackRange","React","createElement","ref","zIndex","opacity","transition","pointerEvents","className","playsInline","objectFit","id","onPlaying","onTimeUpdate","maxVideoTime","duration","minVideoTime","startTime","map","key","isDefault"],"sources":["/Users/sanghayoon/youtube-website-version-1/node_modules/react-hover-video-player/node_modules/tslib/tslib.es6.js","/Users/sanghayoon/youtube-website-version-1/node_modules/react-hover-video-player/src/hooks/useSetAdditionalAttributesOnVideo.ts","/Users/sanghayoon/youtube-website-version-1/node_modules/react-hover-video-player/src/hooks/useFormatVideoSrc.ts","/Users/sanghayoon/youtube-website-version-1/node_modules/react-hover-video-player/src/hooks/useFormatVideoCaptions.ts","/Users/sanghayoon/youtube-website-version-1/node_modules/react-hover-video-player/src/hooks/useHoverTargetElement.ts","/Users/sanghayoon/youtube-website-version-1/node_modules/react-hover-video-player/src/hooks/useManageHoverEvents.ts","/Users/sanghayoon/youtube-website-version-1/node_modules/react-hover-video-player/src/utils/videoElementPlaybackStates.ts","/Users/sanghayoon/youtube-website-version-1/node_modules/react-hover-video-player/src/component/HoverVideoPlayer.styles.ts","/Users/sanghayoon/youtube-website-version-1/node_modules/react-hover-video-player/src/component/HoverVideoPlayer.tsx"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","import React, { useEffect } from 'react';\n\n/**\n * Hook handles manually setting some additional attributes on the video that\n * can't be set directly via attributes on the element.\n *\n * @param {React.RefObject<HTMLVideoElement>} videoRef - Ref to the video element\n * @param {bool} muted - Whether the video should be muted\n * @param {number} volume - The volume level that the video's audio should be set to\n * @param {bool} disableRemotePlayback - Whether we want to disable showing controls to cast the video\n * @param {bool} disablePictureInPicture - Whether we want to disable showing controls to play the video in picture-in-picture mode\n */\nexport default function useSetAdditionalAttributesOnVideo(\n  videoRef: React.RefObject<HTMLVideoElement>,\n  muted: boolean,\n  volume: number,\n  disableRemotePlayback: boolean,\n  disablePictureInPicture: boolean\n): void {\n  useEffect(() => {\n    const videoElement = videoRef.current;\n\n    // Manually setting the `muted` attribute on the video element via an effect in order\n    // to avoid a know React issue with the `muted` prop not applying correctly on initial render\n    // https://github.com/facebook/react/issues/10389\n    videoElement.muted = muted;\n    // Set the video's volume to match the `volume` prop\n    // Note that this will have no effect if the `muted` prop is set to true\n    videoElement.volume = volume;\n  }, [videoRef, muted, volume]);\n\n  useEffect(() => {\n    const videoElement = videoRef.current;\n\n    // React does not support directly setting disableRemotePlayback or disablePictureInPicture directly\n    // via the video element's props, so we have to manually set them in an effect\n    videoElement.disableRemotePlayback = disableRemotePlayback;\n    videoElement.disablePictureInPicture = disablePictureInPicture;\n  }, [videoRef, disablePictureInPicture, disableRemotePlayback]);\n}\n","import { useRef } from 'react';\nimport { VideoSource, VideoSrcProp } from '../HoverVideoPlayer.types';\n\n/**\n * @function  formatVideoSrc\n *\n * Hook takes the videoSrc prop and formats it as a standardized array of VideoSource objects which can be used to render\n * <source> elements for the video\n *\n * @param {VideoSrcProp}  videoSrc - Source(s) to format into VideoSource objects so they can be added to the video player.\n * @param {number}  playbackRangeStart - The earliest time in seconds that we should start loading the video from.\n *                                        This will be enforced by using a #t media fragment identifier to tell the browser to only\n *                                        load the video starting from this time.\n *                                        If not provided, we will load from the start of the video.\n * @param {number}  playbackRangeEnd - The maximum time in seconds that we should load the video to.\n *                                        This will be enforced by using a #t media fragment identifier to tell the browser to only\n *                                        load the video up to this time.\n *                                        If not provided, we will load to the end of the video.\n *\n * @returns {VideoSource[]} Array of formatted VideoSource objects which can be used to render <source> elements for the video\n */\nexport default function useFormatVideoSrc(\n  videoSrc: VideoSrcProp,\n  playbackRangeStart?: number,\n  playbackRangeEnd?: number\n): VideoSource[] {\n  const previousVideoSrc = useRef(null);\n  const previousFormattedVideoSources = useRef<VideoSource[]>(null);\n\n  // If videoSrc is shallowly equal with the previous videoSrc we can just return the previous formatted video sources\n  if (\n    previousVideoSrc.current !== null &&\n    videoSrc === previousVideoSrc.current\n  ) {\n    return previousFormattedVideoSources.current;\n  }\n\n  // Store the previous videoSrc so we can compare it on the next render\n  previousVideoSrc.current = videoSrc;\n\n  const formattedVideoSources = [];\n\n  if (videoSrc == null) {\n    // A videoSrc value is required in order to make the video player work\n    console.error(\n      \"Error: 'videoSrc' prop is required for HoverVideoPlayer component\"\n    );\n  } else {\n    // Make sure we can treat the videoSrc value as an array\n    const rawVideoSources = Array.isArray(videoSrc) ? videoSrc : [videoSrc];\n\n    // Parse our video source values into an array of VideoSource objects that can be used to render sources for the video\n    for (\n      let i = 0, numSources = rawVideoSources.length;\n      i < numSources;\n      i += 1\n    ) {\n      const source = rawVideoSources[i];\n\n      const hasPlaybackRangeStart = playbackRangeStart !== null;\n      const hasPlaybackRangeEnd = playbackRangeEnd !== null;\n\n      // Construct a media fragment identifier string to append to the video's URL to ensure\n      // we only load the portion of the video that we need for the provided playback range\n      // (see here for more details: https://developer.mozilla.org/en-US/docs/Web/Guide/Audio_and_video_delivery#specifying_playback_range)\n      const playbackRangeMediaFragmentIdentifier =\n        hasPlaybackRangeStart || hasPlaybackRangeEnd\n          ? // If we have a playback range defined, construct a #t media fragment identifier string\n            // This identifier follows the format `#t=[starttime][,endtime]` and will tell the browser to only load the video file\n            // within this defined time range.\n            // This helps save us from loading some unneeded data when we only need whatever is within the playback range!\n            `#t=${hasPlaybackRangeStart ? playbackRangeStart : ''}${\n              hasPlaybackRangeEnd ? `,${playbackRangeEnd}` : ''\n            }`\n          : '';\n\n      if (typeof source === 'string') {\n        // If the source is a string, it's an src URL so format it into a VideoSource object and add it to the array\n        formattedVideoSources.push({\n          src: `${source}${playbackRangeMediaFragmentIdentifier}`,\n        });\n      } else if (source && source.src) {\n        // If the source is an object with an src, just add it to the array\n        formattedVideoSources.push({\n          src: `${source.src}${playbackRangeMediaFragmentIdentifier}`,\n          type: source.type,\n        });\n      } else {\n        // Log an error if one of the videoSrc values is invalid\n        console.error(\n          \"Error: invalid value provided to HoverVideoPlayer prop 'videoSrc':\",\n          source\n        );\n      }\n    }\n  }\n\n  // If our formatted video sources are deeply equal to the previous formatted sources\n  // based on a simple string comparison, return the previous formatted sources instead to maintain\n  // referential equality\n  if (\n    JSON.stringify(formattedVideoSources) ===\n    JSON.stringify(previousFormattedVideoSources.current)\n  ) {\n    return previousFormattedVideoSources.current;\n  }\n\n  // Store the final formatted video sources so we can return them on subsequent renders\n  // if the videoSrc hasn't changed\n  previousFormattedVideoSources.current = formattedVideoSources;\n\n  return formattedVideoSources;\n}\n","import { useMemo } from 'react';\nimport {\n  VideoCaptionsTrack,\n  VideoCaptionsProp,\n} from '../HoverVideoPlayer.types';\n\n/**\n * Hook takes the videoCaptions prop and formats it as a standardized array of VideoCaptionsTrack objects which can be used to render\n * <track> elements for the video\n *\n * @param {VideoCaptionsProp} videoCaptions - Captions track(s) to use for the video player for accessibility.\n *\n * @returns {VideoCaptionsTrack[]}  Array of formatted VideoCaptionsTrack objects which can be used to render <track> elements for the video\n */\nexport default function useFormatVideoCaptions(\n  videoCaptions: VideoCaptionsProp\n): VideoCaptionsTrack[] {\n  return useMemo(() => {\n    const formattedVideoCaptions = [];\n\n    // If captions were provided, format them for use for the video\n    if (videoCaptions != null) {\n      // Make sure we can treat the videoCaptions value as an array\n      const rawVideoCaptions = Array.isArray(videoCaptions)\n        ? videoCaptions\n        : [videoCaptions];\n\n      // Parse our raw video captions values into an array of formatted VideoCaptionsTrack\n      // objects that can be used to render caption tracks for the video\n      for (\n        let i = 0, numCaptions = rawVideoCaptions.length;\n        i < numCaptions;\n        i += 1\n      ) {\n        const captions = rawVideoCaptions[i];\n\n        if (captions && captions.src) {\n          formattedVideoCaptions.push({\n            src: captions.src,\n            srcLang: captions.srcLang,\n            label: captions.label,\n            kind: captions.kind || 'captions',\n            default: Boolean(captions.default),\n          });\n        } else {\n          // Log an error if one of the videoCaptions values is invalid\n          console.error(\n            \"Error: invalid value provided to HoverVideoPlayer prop 'videoCaptions'\",\n            captions\n          );\n        }\n      }\n    }\n\n    return formattedVideoCaptions;\n  }, [videoCaptions]);\n}\n","import { useState, useEffect } from 'react';\nimport { HoverTarget } from '../HoverVideoPlayer.types';\n\nconst getElementFromHoverTarget = (hoverTarget: HoverTarget) => {\n  // A `hoverTarget` value could be a function, a DOM element, or a React ref, so\n  // figure out which one it is and get the hover target element out of it accordingly\n  if (typeof hoverTarget === 'function') {\n    return hoverTarget();\n  } else if (hoverTarget instanceof Node) {\n    return hoverTarget;\n  } else if (hoverTarget && hoverTarget.hasOwnProperty('current')) {\n    return hoverTarget.current;\n  } else {\n    console.error(\n      'HoverVideoPlayer was unable to get a usable hover target element. Please check your usage of the `hoverTarget` prop.'\n    );\n  }\n};\n\n/**\n * Extracts a node to watch for hover events on from the `hoverTarget` prop.\n *\n * @param {HoverTarget} hoverTarget\n */\nexport default function useHoverTargetElement(\n  hoverTarget: HoverTarget\n): Node | null {\n  const [hoverTargetElement, setHoverTargetElement] = useState<Node | null>(\n    null\n  );\n\n  useEffect(() => {\n    setHoverTargetElement(getElementFromHoverTarget(hoverTarget));\n  }, [hoverTarget]);\n\n  return hoverTargetElement;\n}\n","import { useEffect, useRef } from 'react';\n\n/**\n * Sets up listeners for hover events on the hover target element and dispatches events\n * when the target element is hovered or unhovered.\n *\n * @param {Node} hoverTargetElement - The target element to watch for hover events on\n * @param {boolean} focused - Whether the component is being manually focused by the focused prop.\n * @param {boolean} disableDefaultEventHandling - If true, disables setting up the standard mouseenter/touchstart/focus listeners\n *                                                on the hover target element.\n * @param {func} onHoverStartCallback - Optional callback to be called when the target element is hovered.\n * @param {func} onHoverEndCallback - Optional callback to be called when the hover target element is unhovered.\n */\nexport default function useManageHoverEvents(\n  hoverTargetElement: Node,\n  focused: boolean,\n  disableDefaultEventHandling: boolean,\n  onHoverStartCallback: () => void,\n  onHoverEndCallback: () => void\n): void {\n  // Keeping hover callbacks as refs because we want to be able to access them from within our\n  // onHoverStart and onHoverEnd event listeners without needing to re-run the\n  // event setup effect every time they change\n  const onHoverStartCallbackRef = useRef<() => void>();\n  onHoverStartCallbackRef.current = onHoverStartCallback;\n\n  const onHoverEndCallbackRef = useRef<() => void>();\n  onHoverEndCallbackRef.current = onHoverEndCallback;\n\n  useEffect(() => {\n    // If default event handling is disabled, we shouldn't check for touch events outside of the player\n    if (disableDefaultEventHandling || !hoverTargetElement) return undefined;\n\n    const onHoverStart = () => {\n      hoverTargetElement.dispatchEvent(new Event('hvp:hoverStart'));\n      if (onHoverStartCallbackRef.current) onHoverStartCallbackRef.current();\n    };\n    const onHoverEnd = () => {\n      hoverTargetElement.dispatchEvent(new Event('hvp:hoverEnd'));\n      if (onHoverEndCallbackRef.current) onHoverEndCallbackRef.current();\n    };\n\n    // Mouse events\n    hoverTargetElement.addEventListener('mouseenter', onHoverStart);\n    hoverTargetElement.addEventListener('mouseleave', onHoverEnd);\n\n    // Focus/blur\n    hoverTargetElement.addEventListener('focus', onHoverStart);\n    hoverTargetElement.addEventListener('blur', onHoverEnd);\n\n    // Touch events\n    const touchStartListenerOptions = { passive: true };\n\n    hoverTargetElement.addEventListener(\n      'touchstart',\n      onHoverStart,\n      touchStartListenerOptions\n    );\n    // Event listener pauses the video when the user touches somewhere outside of the player\n    const onWindowTouchStart = (event: TouchEvent) => {\n      if (\n        !(event.target instanceof Node) ||\n        !hoverTargetElement.contains(event.target)\n      ) {\n        onHoverEnd();\n      }\n    };\n\n    window.addEventListener(\n      'touchstart',\n      onWindowTouchStart,\n      touchStartListenerOptions\n    );\n\n    // Return a cleanup function that removes all event listeners\n    return () => {\n      hoverTargetElement.removeEventListener('mouseenter', onHoverStart);\n      hoverTargetElement.removeEventListener('mouseleave', onHoverEnd);\n      hoverTargetElement.removeEventListener('focus', onHoverStart);\n      hoverTargetElement.removeEventListener('blur', onHoverEnd);\n      hoverTargetElement.removeEventListener('touchstart', onHoverStart);\n      window.removeEventListener('touchstart', onWindowTouchStart);\n    };\n  }, [disableDefaultEventHandling, hoverTargetElement]);\n\n  // Defaulting the ref to false rather than the initial value of the focused prop because\n  // if focused is true initially, we want to run the effect, but if it's false, we don't\n  const previousFocusedRef = useRef<boolean>(false);\n\n  // Effect dispatches hover start/end events on the target element when the focused prop changes\n  useEffect(() => {\n    if (!hoverTargetElement) return;\n\n    if (previousFocusedRef.current !== focused) {\n      previousFocusedRef.current = focused;\n\n      if (focused) {\n        hoverTargetElement.dispatchEvent(new Event('hvp:hoverStart'));\n      } else {\n        hoverTargetElement.dispatchEvent(new Event('hvp:hoverEnd'));\n      }\n    }\n  }, [hoverTargetElement, focused]);\n}\n","/**\n * Takes a video element and returns whether it is currently paused, meaning it is not\n * playing or attempting to play.\n *\n * @param {HTMLVideoElement} videoElement\n */\nexport function isVideoElementPaused(videoElement: HTMLVideoElement): boolean {\n  return videoElement.paused || videoElement.ended;\n}\n\n/**\n * Takes a video element and returns whether it is currently loading, meaning it is not\n * paused but has also not loaded enough to play.\n *\n * @param {HTMLVideoElement} videoElement\n */\nexport function isVideoElementLoading(videoElement: HTMLVideoElement): boolean {\n  return (\n    !isVideoElementPaused(videoElement) &&\n    videoElement.readyState < videoElement.HAVE_FUTURE_DATA\n  );\n}\n\n/**\n * Takes a video element and returns whether it is currently playing, meaning it is not\n * paused and is loaded enough to be playing.\n *\n * @param {HTMLVideoElement} videoElement\n */\nexport function isVideoElementPlaying(videoElement: HTMLVideoElement): boolean {\n  return (\n    !isVideoElementPaused(videoElement) && !isVideoElementLoading(videoElement)\n  );\n}\n","import React from 'react';\n\ninterface SizingModeStyle {\n  video: React.CSSProperties;\n  overlay: React.CSSProperties;\n  container: React.CSSProperties;\n  manual: React.CSSProperties;\n}\n\n// CSS styles to make some contents in the player expand to fill the container\nexport const expandToFillContainerStyle: React.CSSProperties = {\n  position: 'absolute',\n  width: '100%',\n  height: '100%',\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0,\n};\n\nconst containerMatchContentDimensionsStyle: React.CSSProperties = {\n  display: 'inline-block',\n};\n\nexport const containerSizingStyles: SizingModeStyle = {\n  video: containerMatchContentDimensionsStyle,\n  overlay: containerMatchContentDimensionsStyle,\n  container: null,\n  manual: null,\n};\n\n// Styles to apply to the paused overlay wrapper for each sizing mode\nexport const pausedOverlayWrapperSizingStyles: SizingModeStyle = {\n  // Sizing should be based on the video element, so make the overlay\n  // expand to cover the player's container element\n  video: expandToFillContainerStyle,\n  // Sizing should be based on the paused overlay, so set position: relative\n  // to make it occupy space in the document flow\n  overlay: {\n    position: 'relative',\n  },\n  // Sizing should be based on the player's container element, so make the overlay\n  // expand to cover it\n  container: expandToFillContainerStyle,\n  // Don't apply any preset styling to the overlay\n  manual: null,\n};\n\n// Styles to apply to the video element for each sizing mode\nexport const videoSizingStyles: SizingModeStyle = {\n  // Sizing should be based on the video element, so set display: block\n  // to make sure it occupies space in the document flow\n  video: {\n    display: 'block',\n    // Ensure the video is sized relative to the container's width\n    // rather than the video asset's native width\n    width: '100%',\n  },\n  // Make the video element expand to cover the container if we're sizing\n  // based on the overlay or container\n  overlay: expandToFillContainerStyle,\n  container: expandToFillContainerStyle,\n  // Don't apply any preset styling to the video\n  manual: null,\n};\n","import React, { useRef, useImperativeHandle, useEffect, useState } from 'react';\n\nimport useSetAdditionalAttributesOnVideo from '../hooks/useSetAdditionalAttributesOnVideo';\nimport useFormatVideoSrc from '../hooks/useFormatVideoSrc';\nimport useFormatVideoCaptions from '../hooks/useFormatVideoCaptions';\nimport useHoverTargetElement from '../hooks/useHoverTargetElement';\nimport useManageHoverEvents from '../hooks/useManageHoverEvents';\n\nimport {\n  isVideoElementPaused,\n  isVideoElementPlaying,\n} from '../utils/videoElementPlaybackStates';\n\nimport {\n  expandToFillContainerStyle,\n  containerSizingStyles,\n  pausedOverlayWrapperSizingStyles,\n  videoSizingStyles,\n} from './HoverVideoPlayer.styles';\nimport { HoverVideoPlayerProps, VideoSource } from '../HoverVideoPlayer.types';\n\n/**\n * @component HoverVideoPlayer\n * @license MIT\n *\n * @param {HoverVideoPlayerProps} props\n */\nexport default function HoverVideoPlayer({\n  videoSrc,\n  videoCaptions = null,\n  focused = false,\n  disableDefaultEventHandling = false,\n  hoverTarget = null,\n  onHoverStart = null,\n  onHoverEnd = null,\n  hoverOverlay = null,\n  pausedOverlay = null,\n  loadingOverlay = null,\n  loadingStateTimeout = 200,\n  overlayTransitionDuration = 400,\n  playbackStartDelay = 0,\n  restartOnPaused = false,\n  unloadVideoOnPaused = false,\n  playbackRangeStart = null,\n  playbackRangeEnd = null,\n  muted = true,\n  volume = 1,\n  loop = true,\n  preload = null,\n  crossOrigin = null,\n  controls = false,\n  controlsList = null,\n  disableRemotePlayback = true,\n  disablePictureInPicture = true,\n  style = null,\n  hoverOverlayWrapperClassName = null,\n  hoverOverlayWrapperStyle = null,\n  pausedOverlayWrapperClassName = null,\n  pausedOverlayWrapperStyle = null,\n  loadingOverlayWrapperClassName = null,\n  loadingOverlayWrapperStyle = null,\n  videoId = null,\n  videoClassName = null,\n  videoRef: forwardedVideoRef = null,\n  videoStyle = null,\n  sizingMode = 'video',\n  shouldSuppressPlaybackInterruptedErrors = true,\n  ...spreadableProps\n}: HoverVideoPlayerProps): JSX.Element {\n  // Element refs\n  const containerRef = useRef(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  // Forward out local videoRef along to the videoRef prop\n  useImperativeHandle(forwardedVideoRef, () => videoRef.current);\n\n  // Effect sets attributes on the video which can't be done via props\n  useSetAdditionalAttributesOnVideo(\n    videoRef,\n    muted,\n    volume,\n    disableRemotePlayback,\n    disablePictureInPicture\n  );\n\n  // Get the hover target element from the hoverTarget prop, or default to the component's container div\n  const hoverTargetElement = useHoverTargetElement(hoverTarget || containerRef);\n\n  // Keep a ref for the time which the video should be started from next time it is played\n  // This is useful if the video gets unloaded and we want to restore it to the time it was\n  // at before if the user tries playing it again\n  const nextVideoStartTimeRef = useRef(null);\n\n  // Parse the sources and captions into formatted arrays that we can use to\n  // render <source> and <track> elements for the video\n  const formattedVideoCaptions = useFormatVideoCaptions(videoCaptions);\n  const formattedVideoSources = useFormatVideoSrc(\n    videoSrc,\n    playbackRangeStart,\n    playbackRangeEnd\n  );\n  // Keep a ref to the previous formatted video sources so we can track when the video sources change\n  const previousFormattedVideoSourcesRef = useRef<VideoSource[]>(\n    formattedVideoSources\n  );\n\n  /**\n   * Attempts to load and play the video.\n   * Storing this on a ref because we don't really want to worry about triggering re-renders when\n   * any of this function's dependencies change; it should only be called when the\n   * player is hovered/focused.\n   */\n  const attemptToPlayVideoRef = useRef<() => void>();\n  attemptToPlayVideoRef.current = () => {\n    const videoElement = videoRef.current;\n\n    if (nextVideoStartTimeRef.current !== null) {\n      videoElement.currentTime = nextVideoStartTimeRef.current;\n    }\n\n    videoElement.play().catch((error: DOMException) => {\n      // If shouldSuppressPlaybackInterruptedErrors is true and this is an AbortError, do nothing instead of logging it.\n      if (\n        shouldSuppressPlaybackInterruptedErrors &&\n        error.name === 'AbortError'\n      ) {\n        return;\n      }\n\n      // Additional handling for when browsers block playback for unmuted videos.\n      // This is unfortunately necessary because most modern browsers do not allow playing videos with audio\n      //  until the user has \"interacted\" with the page by clicking somewhere at least once; mouseenter events\n      //  don't count.\n      // If the video isn't muted and playback failed with a `NotAllowedError`, this means the browser blocked\n      // playing the video because the user hasn't clicked anywhere on the page yet.\n      if (!videoElement.muted && error.name === 'NotAllowedError') {\n        console.warn(\n          'HoverVideoPlayer: Playback with sound was blocked by the browser. Attempting to play again with the video muted; audio will be restored if the user clicks on the page.'\n        );\n        // Mute the video and attempt to play again\n        videoElement.muted = true;\n        videoElement.play();\n\n        // When the user clicks on the document, unmute the video since we should now\n        // be free to play audio\n        const onClickDocument = () => {\n          videoElement.muted = false;\n\n          // Clean up the event listener so it is only fired once\n          document.removeEventListener('click', onClickDocument);\n        };\n        document.addEventListener('click', onClickDocument);\n      } else {\n        // Log any other playback errors with console.error\n        console.error(`HoverVideoPlayer: ${error.message}`);\n      }\n    });\n  };\n\n  /**\n   * Attempts to pause the video.\n   * Storing this on a ref because we don't really want to worry about triggering re-renders when\n   * any of this function's dependencies change; it should only be called when the\n   * player is un-hovered/focused.\n   */\n  const attemptToPauseVideoRef = useRef<() => void>();\n  attemptToPauseVideoRef.current = () => {\n    const videoElement = videoRef.current;\n\n    videoElement.pause();\n\n    // Performing post-save cleanup tasks in here rather than the onPause listener\n    // because onPause can also be called when the video reaches the end of a playback range\n    // and it's just simpler to deal with that separately\n    if (restartOnPaused) {\n      videoElement.currentTime = playbackRangeStart || 0;\n    }\n    nextVideoStartTimeRef.current = videoElement.currentTime;\n\n    setIsPlaying(false);\n  };\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isHovering, setIsHovering] = useState(false);\n\n  useEffect(() => {\n    if (!isPlaying) {\n      // When the video isn't playing, check if the sources loaded in the video\n      // have changed from what the video currently has loaded. If so, we'll call videoElement.load()\n      // to trigger a reload with the new source\n      const shouldReloadVideoSources =\n        previousFormattedVideoSourcesRef.current !== formattedVideoSources;\n\n      if (shouldReloadVideoSources) {\n        previousFormattedVideoSourcesRef.current = formattedVideoSources;\n\n        const videoElement = videoRef.current;\n        // If the video element doesn't have a loaded source or the source has changed since the\n        // last time we played the video, make sure to force the video to load the most up-to-date sources\n        videoElement.load();\n        // Reset the next start time to the start of the video\n        nextVideoStartTimeRef.current = playbackRangeStart || 0;\n      }\n    }\n  }, [formattedVideoSources, isPlaying, playbackRangeStart]);\n\n  const hasPausedOverlay = Boolean(pausedOverlay);\n  const hasHoverOverlay = Boolean(hoverOverlay);\n\n  // If we have a paused or hover overlay, the player should wait\n  // for the overlay(s) to finish transitioning back in before we\n  // pause the video\n  const shouldWaitForOverlayTransitionBeforePausing =\n    hasPausedOverlay || hasHoverOverlay;\n\n  useEffect(() => {\n    if (!hoverTargetElement) return undefined;\n\n    let playbackStartTimeout: number | null = null;\n    let pauseTimeout: number | null = null;\n\n    const cancelTimeouts = () => {\n      // Cancel any previously active pause or playback attempts\n      window.clearTimeout(playbackStartTimeout);\n      window.clearTimeout(pauseTimeout);\n    };\n\n    const attemptToPlayVideoOnHover = () => {\n      cancelTimeouts();\n\n      setIsHovering(true);\n\n      // We only need to attempt to play if the video is currently paused\n      if (isVideoElementPaused(videoRef.current)) {\n        if (playbackStartDelay) {\n          playbackStartTimeout = window.setTimeout(\n            () => attemptToPlayVideoRef.current(),\n            playbackStartDelay\n          );\n        } else {\n          attemptToPlayVideoRef.current();\n        }\n      }\n    };\n    const attemptToPauseVideoOnHoverEnd = () => {\n      cancelTimeouts();\n\n      setIsHovering(false);\n\n      if (\n        // We only need to delay a pause attempt if the video is currently playing\n        isVideoElementPlaying(videoRef.current) &&\n        shouldWaitForOverlayTransitionBeforePausing\n      ) {\n        pauseTimeout = window.setTimeout(\n          () => attemptToPauseVideoRef.current(),\n          overlayTransitionDuration\n        );\n      } else {\n        attemptToPauseVideoRef.current();\n      }\n    };\n\n    hoverTargetElement.addEventListener(\n      'hvp:hoverStart',\n      attemptToPlayVideoOnHover\n    );\n    hoverTargetElement.addEventListener(\n      'hvp:hoverEnd',\n      attemptToPauseVideoOnHoverEnd\n    );\n\n    return () => {\n      hoverTargetElement.removeEventListener(\n        'hvp:hoverStart',\n        attemptToPlayVideoOnHover\n      );\n      hoverTargetElement.removeEventListener(\n        'hvp:hoverEnd',\n        attemptToPauseVideoOnHoverEnd\n      );\n      cancelTimeouts();\n    };\n  }, [\n    hoverTargetElement,\n    overlayTransitionDuration,\n    playbackStartDelay,\n    shouldWaitForOverlayTransitionBeforePausing,\n  ]);\n\n  useManageHoverEvents(\n    hoverTargetElement,\n    focused,\n    disableDefaultEventHandling,\n    onHoverStart,\n    onHoverEnd\n  );\n\n  // We should attempt to play the video if the user is hovering over it or the `focused` override prop is enabled\n  // const shouldPlayVideo = isHoveringOverVideo || focused;\n\n  const hasLoadingOverlay = Boolean(loadingOverlay);\n\n  // If the video's sources should be unloaded when it's paused and the video is not currently active, we can unload the video's sources.\n  // We will remove the video's <source> tags in this render and then call video.load() in an effect to\n  // fully unload the video\n  const shouldUnloadVideo = unloadVideoOnPaused && !isHovering && !isPlaying;\n\n  useEffect(() => {\n    // If shouldUnloadVideo is true, this effect is being run after the video's\n    // sources have been removed, so call load on the video to unload any sources it currently has loaded\n    if (shouldUnloadVideo) {\n      const videoElement = videoRef.current;\n      videoElement.load();\n    }\n  }, [shouldUnloadVideo]);\n\n  const shouldShowLoadingOverlay = isHovering && !isPlaying;\n  // Show a paused overlay when the user isn't hovering or when the user is hovering\n  // but the video is still loading\n  const shouldShowPausedOverlay = !isHovering || (isHovering && !isPlaying);\n\n  const isUsingPlaybackRange =\n    playbackRangeStart !== null || playbackRangeEnd !== null;\n\n  return (\n    <div\n      data-testid=\"hover-video-player-container\"\n      ref={containerRef}\n      style={{\n        ...containerSizingStyles[sizingMode],\n        position: 'relative',\n        ...style,\n      }}\n      {...spreadableProps}\n    >\n      {hasPausedOverlay ? (\n        <div\n          style={{\n            ...pausedOverlayWrapperSizingStyles[sizingMode],\n            zIndex: 1,\n            opacity: shouldShowPausedOverlay ? 1 : 0,\n            transition: `opacity ${overlayTransitionDuration}ms`,\n            // Disable pointer events on the paused overlay when it's hidden\n            pointerEvents: shouldShowPausedOverlay ? 'auto' : 'none',\n            ...pausedOverlayWrapperStyle,\n          }}\n          className={pausedOverlayWrapperClassName}\n          data-testid=\"paused-overlay-wrapper\"\n        >\n          {pausedOverlay}\n        </div>\n      ) : null}\n      {hasLoadingOverlay ? (\n        <div\n          style={{\n            ...expandToFillContainerStyle,\n            zIndex: 2,\n            opacity: shouldShowLoadingOverlay ? 1 : 0,\n            transition: `opacity ${overlayTransitionDuration}ms ${\n              shouldShowLoadingOverlay ? loadingStateTimeout : 0\n            }ms`,\n            // Disable pointer events on the loading overlay when it's hidden\n            pointerEvents: shouldShowLoadingOverlay ? 'auto' : 'none',\n            ...loadingOverlayWrapperStyle,\n          }}\n          className={loadingOverlayWrapperClassName}\n          data-testid=\"loading-overlay-wrapper\"\n        >\n          {loadingOverlay}\n        </div>\n      ) : null}\n      {hasHoverOverlay ? (\n        <div\n          style={{\n            ...expandToFillContainerStyle,\n            zIndex: 3,\n            // Show the hover overlay when the player is hovered/playing\n            opacity: isHovering ? 1 : 0,\n            transition: `opacity ${overlayTransitionDuration}ms`,\n            // Disable pointer events on the hover overlay when it's hidden\n            pointerEvents: isHovering ? 'auto' : 'none',\n            ...hoverOverlayWrapperStyle,\n          }}\n          className={hoverOverlayWrapperClassName}\n          data-testid=\"hover-overlay-wrapper\"\n        >\n          {hoverOverlay}\n        </div>\n      ) : null}\n      {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n      <video\n        // If a playback range is set, the loop attribute will not work correctly so there's no point in setting it here;\n        // in that case, we will manually implement this behavior\n        loop={isUsingPlaybackRange ? false : loop}\n        playsInline\n        preload={preload}\n        crossOrigin={crossOrigin}\n        ref={videoRef}\n        style={{\n          ...videoSizingStyles[sizingMode],\n          objectFit: 'cover',\n          ...videoStyle,\n        }}\n        controls={controls}\n        controlsList={controlsList}\n        className={videoClassName}\n        id={videoId}\n        data-testid=\"video-element\"\n        onPlaying={() => {\n          setIsPlaying(true);\n        }}\n        onTimeUpdate={\n          // If there's a playback range set, the traditional `loop` video prop won't work correctly so\n          // we'll need watch the video's time as it plays and manually keep it within the bounds of the range\n          isUsingPlaybackRange\n            ? () => {\n                const videoElement = videoRef.current;\n\n                const maxVideoTime = playbackRangeEnd || videoElement.duration;\n                const minVideoTime = playbackRangeStart || 0;\n\n                const { currentTime } = videoElement;\n\n                if (loop && currentTime >= maxVideoTime) {\n                  // If the video should loop and is >= the max video time,\n                  // loop it back around to the start\n                  const startTime = playbackRangeStart || 0;\n                  videoElement.currentTime = startTime;\n\n                  // If the video is paused but the user is still hovering,\n                  // meaning it should continue to play, call play() to keep it going\n                  if (isHovering && isVideoElementPaused(videoElement)) {\n                    videoElement.play();\n                  }\n                } else if (currentTime > maxVideoTime) {\n                  // If the video shouldn't loop but we've exceeded the max video time,\n                  // clamp it to the max time and pause it\n                  videoElement.pause();\n                  videoElement.currentTime = maxVideoTime;\n                } else if (currentTime < minVideoTime) {\n                  // If the video's time somehow ended up before the min video time,\n                  // clamp it to the min time\n                  videoElement.currentTime = minVideoTime;\n                }\n              }\n            : null\n        }\n      >\n        {!shouldUnloadVideo &&\n          // Only render sources for the video if it is not unloaded\n          formattedVideoSources.map(({ src, type }) => (\n            <source key={src} src={src} type={type} />\n          ))}\n        {formattedVideoCaptions.map(\n          ({ src, srcLang, label, kind, default: isDefault }) => (\n            <track\n              key={src}\n              kind={kind}\n              src={src}\n              srcLang={srcLang}\n              label={label}\n              default={isDefault}\n            />\n          )\n        )}\n      </video>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}